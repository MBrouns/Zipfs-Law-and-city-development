to setup
  if seed != 0[
    random-seed seed
  ]
  clear-all
  reset-ticks
  import-pcolors "/resources/nederland.png"
  init-globals
  setup-plot
  setup-patches
  setup-households
  set cityDistanceList determine-city-distances
end

to setup-plot
  set-current-plot "Households"
    create-temporary-plot-pen "Total households"
    set-plot-pen-color 5
    create-temporary-plot-pen "Households in city"
    set-plot-pen-color 125
    create-temporary-plot-pen "Households out city"
    set-plot-pen-color 135
  
end

to setup-patches
  ;; first set the cityIdentifier to 0 for all patches in The Netherlands
  ask patches with [pcolor != 98.1][
    set cityIdentifier -1
  ]
  ask patches with [pcolor = 98.1][
    set cityIdentifier 0
  ]
  
  
  ;; Then randomly create a number of cities with a unique identifier
  let cityIterator 1
  Ask patches with [pxcor = 31 AND pycor = 22 AND pcolor = 98.1][
    
    ;; Add a pen to the household plot for each city
    set-current-plot "Households"
    create-temporary-plot-pen word "city" cityIterator
    set-plot-pen-color cityIterator * 10 + 5
    
    
    ask patches in-radius 10
      [ set cityIdentifier cityIterator
        set pcolor cityIdentifier * 10 + 5  ;; Generate unique random color for each city
      ] 
    set cityIterator cityIterator + 1 
    
    
    ;;let patchesInMaxRange (patches in-radius maxDistBetweenCities with [pcolor = 98.1])
    ;;let patchesInMinRange (patches in-radius minDistBetweenCities with [pcolor = 98.1])
    ;subtract even-ones from red-ones
    ;; let patchesBetweenRange patchesInMaxRange with [not member? self patchesInMinRange]
    
    
    ;; We want to draw new cities in a donut around this first city. Since the regular method to do this
    ;; in Netlogo (with  let patchesBetweenRange patchesInMaxRange with [not member? self patchesInMinRange])
    ;; is stupidly slow, we first draw a large red circle around first city, then change the color in the inner
    ;; part of the donut back to normal and then put new cities in the part which is still red. 
    Ask patches in-radius maxDistBetweenCities with [pcolor = 98.1][set pcolor 13]
    Ask patches in-radius minDistBetweenCities with [pcolor = 13][set pcolor 98.1]
    
    while [cityIterator <= noOfCities][
      Ask one-of patches with [pcolor = 13][
      
      ;; Add a pen to the household plot for each city
      set-current-plot "Households"
      create-temporary-plot-pen word "city" cityIterator
      set-plot-pen-color cityIterator * 10 + 5
      Ask patches in-radius minDistBetweenCities with [pcolor = 13][set pcolor 98.1]
      
      ask patches in-radius 10
      [ set cityIdentifier cityIterator
        set pcolor cityIdentifier * 10 + 5  ;; Generate unique random color for each city
      ]  
      set cityIterator cityIterator + 1 
    ]  
    ]
    
    ask patches with [pcolor = 13][set pcolor 98.1]
  ]
end

;; Generate households and put them on the map
to setup-households
  let noOfHouseholdsInCity round (PercHouseholdsInitialInCity * noOfHouseholds)
  let noOfHouseholdsOutCity round ((1 - PercHouseholdsInitialInCity) * noOfHouseholds)
  
  ;; First, randomly distribute households over The Netherlands outside of cities
  create-turtles noOfHouseholdsOutCity [
    move-to one-of patches with [cityIdentifier = 0]
    initialise-household
    set peopleList sort-by [item ageAcc ?1 > item ageAcc ?2] peopleList
    updateHouseholdAttributes
  ]
  ;; then, randomly distribute households over The Netherlands inside of cities
  create-turtles noOfHouseholdsInCity [
    move-to one-of patches with [cityIdentifier > 0]
    initialise-household
    set peopleList sort-by [item ageAcc ?1 > item ageAcc ?2 ] peopleList
    updateHouseholdAttributes
  ]
  
end



;; Initialise households to their default settings
to initialise-household
  ;; Generate members
  ;; Possible type of households:
  ;; single-member household
  ;;    Age 16 - 23          15%
  ;; two-member household
  ;;     Age 23-30           15%
  ;;     Age 55+             35%
  ;; household with children
  ;;     Age 30 - 55         35% 
  let householdChance  random 100
  
  ifelse householdChance < 20 [ 
    ;; Generate single-member household
    let member generate-member 16 23 "random" 
    
    set peopleList (list member)
  ] 
  [ ifelse householdChance < 27 [ 
    ;; Generate two-member household Age 23-30
    let member1 generate-member 23 30 "male"
    let member2 generate-member 23 30 "female"
    set peopleList (list member1 member2 )
  ] 
  [ ifelse householdChance < 60 [ 
    ;; Generate two-member household Age 55+
    let member1 generate-member 55 80 "male"
    let member2 generate-member 55 80 "female"
    set peopleList (list member1 member2)
    
  ] 
  [ ;; Generate household with children
    let noOfChildren random 4
    let childrenIterator 0
    let childrenList (list)
    while[childrenIterator < noOfChildren][
      let member generate-member 0 16 "random"
      set childrenList lput member childrenList
      set childrenIterator childrenIterator + 1
    ]
    let member1 generate-member 30 55 "male" 
    let member2 generate-member 30 55 "female"
    set peopleList lput member1 childrenList
    set peopleList lput member2 peopleList
    
  ]]] 
  
end


;; Generate a random person in a agerange between ageMin and ageMax
;; if $sex = "random", a random sex is chosen. Else it is as defined
;; input: 
;; $ageMin : Int
;; $ageMax : Int
;; $sex : {"random", "male", "female"}
to-report generate-member [$ageMin $ageMax $sex]
  let ageDiff $ageMax - $ageMin
  let age (random ageDiff) + $ageMin
  let sex $sex
  if $sex = "random" [
    ifelse random 2 = 0 [
      set sex "female"
    ][
    set sex "male"
    ]   
  ]
  
  let job 0
  let randomJob random 100
  ifelse randomJob <= 2 [
    set job 1
  ][ifelse randomJob <= 18 [
    set job 2
  ][ifelse randomJob <= 50 [
    set job 3
  ][ifelse randomJob <= 54 [
    set job 4
  ][ifelse randomJob <= 58 [
    set job 5
  ][ifelse randomJob <= 92 [
    set job 6
  ][
  set job 7
  ]]]]]]
  
  
  
  let member (list age sex job)
  report member
end

to-report determine-city-distances
  set cityDistanceList []
  let outerCityIterator 1
  
  while [outerCityIterator <= noOfCities][
    let innerCityIterator 1
    let innerCityDistanceList []
    while [innerCityIterator <= noOfCities][
      
      ask one-of patches with [cityIdentifier = outerCityIterator][
        set innerCityDistanceList lput distance one-of patches with [cityIdentifier = innerCityIterator] innerCityDistanceList
      ]
      
      set innerCityIterator innerCityIterator + 1
    ]
    set cityDistanceList lput innerCityDistanceList cityDistanceList
    set outerCityIterator outerCityIterator + 1
  ]
  
  report cityDistanceList
end


to init-globals
  set ageAcc 0
  set sexAcc 1
  set maxDistBetweenCities (max ( list maxDistBetweenCities (minDistBetweenCities + 10)))
  set jobAcc 2
  let cityIterator 0
  set jobAttractivenessList []
  while[cityIterator <= noOfCities] [
    let jobIterator 1
    let jobAttractivenessForCity []
    while [jobIterator <= 7][
      set jobAttractivenessForCity lput 1 jobAttractivenessForCity 
      set jobIterator jobIterator + 1
    ]
    set jobAttractivenessList lput jobAttractivenessForCity jobAttractivenessList    
    set cityIterator cityIterator + 1
  ]
  
end

