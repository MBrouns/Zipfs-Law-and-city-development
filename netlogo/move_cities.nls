to-report determine-resistence-to-move
  ;;ifelse random 10 = 1 [report 0][report 1]
  ifelse timeSinceMoving < 10 [
    report (1 - (0.05 * timeSinceMoving))
  ][ifelse timeSinceMoving < 20 [
    report (0.5 + (0.012 * timeSinceMoving))
    ][
    report 0.75
    ]
  ]
  
  
end

to-report determine-city-attractiveness
  let cityAttractivenessListHouseholdPerPerson []
  let finalCityAttractivenessListHousehold [] 
  
  foreach peopleList[
    let person ?
    let job (item jobAcc person)
    let cityAttractivenessList []
    forEach jobAttractivenessList[
      set cityAttractivenessList lput item (job - 1) ? cityAttractivenessList
     
    ] 
    set cityAttractivenessListHouseholdPerPerson lput cityAttractivenessList cityAttractivenessListHouseholdPerPerson
  ]      
   
  let cityIterator 0
  while [cityIterator <= noOfCities] [
    let cityAverage mean map [item cityIterator ?] cityAttractivenessListHouseholdPerPerson
    set finalCityAttractivenessListHousehold lput cityAverage finalCityAttractivenessListHousehold
    set cityIterator cityIterator + 1 
  ]
  
  
  report finalCityAttractivenessListHousehold   
end

to determine-city-attractiveness-from-jobs
  set jobAttractivenessList []
  
  set jobAttractivenessList lput (list 0.55 0.55 0.5 0.5 0.5 0.5 0.5) jobAttractivenessList
  let cityIterator 1
  while[cityIterator <= noOfCities] [
    let jobIterator 1
    let jobAttractivenessForCity []
    while [jobIterator <= 7][
      set jobAttractivenessForCity lput precision (determine-city-attractiveness-per-job cityIterator jobIterator) 2 jobAttractivenessForCity 
      set jobIterator jobIterator + 1
    ]
    set jobAttractivenessList lput jobAttractivenessForCity jobAttractivenessList    
    set cityIterator cityIterator + 1
  ]
  
  
end


to-report determine-city-attractiveness-per-job [$cityIdentifier $jobIdentifier]
  ifelse $jobIdentifier = 1[
    ;; Job in primary sector
    let householdsInCity count turtles-on patches with [cityIdentifier = $cityIdentifier]
    let fractionHouseholdsInCity householdsInCity / noOfHouseholds
    ifelse fractionHouseholdsInCity < 0.4 / noOfCities[
      report 1 - 6.25 * fractionHouseholdsInCity      
    ][
    report 0.54 - 0.54 * fractionHouseholdsInCity
    ]
    
  ][ifelse $jobIdentifier = 2[
    ;; Job in manufacturing
    let householdsInCity count turtles-on patches with [cityIdentifier = $cityIdentifier]
    let fractionHouseholdsInCity householdsInCity / noOfHouseholds
    ifelse fractionHouseholdsInCity < 0.4 / noOfCities[
      report 1 - 6.25 * fractionHouseholdsInCity      
    ][
    report 0.54 - 0.54 * fractionHouseholdsInCity
    ]
    
  ][ifelse $jobIdentifier = 3[
    ;; Job in services
    let peopleInService 0
    let peopleInCity 0
    ask turtles-on patches with [cityIdentifier = $cityIdentifier][
      set peopleInCity peopleInCity + length filter [item ageAcc ? > 18] peopleList
      set peopleInService peopleInService + NoOfpeopleInService
    ] 
    let fractionPeopleInService peopleInService / peopleInCity
    ifelse fractionPeopleInService < 0.32[
      report 1 - 1.56 * fractionPeopleInService
      
    ][
    report 0.73 - 0.73 * fractionPeopleInService
    ]
  ][ifelse $jobIdentifier = 4[
    ;; Job in finance
    let householdsInCity turtles-on patches with [cityIdentifier = $cityIdentifier]
    let peopleInFinance 0
    let peopleInCity 0
    ask householdsInCity[
      set peopleInCity peopleInCity + length filter [item ageAcc ? > 18] peopleList
      set peopleInFinance peopleInFinance + NoOfpeopleInFinance
    ] 
    let fractionPeopleInFinance peopleInFinance / peopleInCity
    
    ifelse fractionPeopleInFinance < 0.04[
      report 0.5
      
    ][
    report min (list 1 (12.5 * fractionPeopleInFinance))
    ]
    
  ][ifelse $jobIdentifier = 5[
    ;; Job in IT
    let peopleInIT 0
    let peopleInCity 0
    ask turtles-on patches with [cityIdentifier = $cityIdentifier][
      set peopleInCity peopleInCity + length filter [item ageAcc ? > 18] peopleList
      set peopleInIT peopleInIT + NoOfpeopleInIT
    ] 
    let fractionPeopleInIT peopleInIT / peopleInCity
    ifelse fractionPeopleInIT < 0.04[
      report 0.5
      
    ][
    report min (list 1 (12.5 * fractionPeopleInIT))
    ]
    
    
  ][ifelse $jobIdentifier = 6[
    ;; job in non-profit
    let peopleInNonProfit 0
    let peopleInCity 0
    ask turtles-on patches with [cityIdentifier = $cityIdentifier][
      set peopleInCity peopleInCity + length filter [item ageAcc ? > 18] peopleList
      set peopleInNonProfit peopleInNonProfit + NoOfpeopleInNonProfit
    ] 
    let fractionPeopleInNonProfit peopleInNonProfit / peopleInCity
   
    ifelse fractionPeopleInNonProfit < 0.34[
      report 1 - 1.47 * fractionPeopleInNonProfit
      
    ][
    report 0.76 - 0.76 * fractionPeopleInNonProfit
    ]
  ][ifelse $jobIdentifier = 7[
    ;; Jobless0
    report 0.5
    
  ][]]]]]]]
  
end


to move-to-city [$cityIdentifier]
  move-to one-of patches with [cityIdentifier = $cityIdentifier]  
end